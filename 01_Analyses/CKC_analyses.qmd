---
title: "Caribbean king crab optimization analyses"
format: html
editor_options: 
  chunk_output_type: console
---

# Project information

Title: Optimization of grow‐out culture of Caribbean king crab Funder: Gulf States Marine Fisheries Commission Award number: NA20NMF4540293 (subcontract ACQ-210-039-2023-USF)

PI(s): Christopher Stallings and Fredrick Stengard

Code developer(s): Christopher Stallings Origination Date: 2025-05-16

# Packages and parameters
```{r}
# Load required packages
library(tidyverse)  # for data manipulation and visualization
library(patchwork) # for arranging plots
library(dplyr) # for data manipulation
library(car) # for Levene's Test
library(ResourceSelection)  # for Hosmer-Lemeshow test
library(pscl)               # for pseudo R²
library(pROC)               # for ROC curve and AUC
library(ggplot2)

# Import data
source("00_CommonFiles/DataImport.R")
```

# Visualization
## Change in size
```{r}
# Function for carapace width plots
plot_cw <- function(df, df_title) {
  df <- df %>% drop_na(cw_diff, cw_percent, ttt, sex)

  p1 <- ggplot(df, aes(x = ttt, y = cw_diff)) +
    geom_boxplot() +
    labs(title = df_title, x = "ttt", y = "Change in carapace width (mm)")

  p2 <- ggplot(df, aes(x = sex, y = cw_diff)) +
    geom_boxplot() +
    labs(title = df_title, x = "sex", y = "Change in carapace width (mm)")

  p3 <- ggplot(df, aes(x = ttt, y = cw_percent)) +
    geom_boxplot() +
    labs(title = df_title, x = "ttt", y = "Percent change in carapace width")

  p4 <- ggplot(df, aes(x = sex, y = cw_percent)) +
    geom_boxplot() +
    labs(title = df_title, x = "sex", y = "Percent change in carapace width")

  (p1 | p2) / (p3 | p4)
}

# Function for mass plots
plot_mass <- function(df, df_title) {
  df <- df %>% drop_na(mass_diff, mass_percent, ttt, sex)

  p1 <- ggplot(df, aes(x = ttt, y = mass_diff)) +
    geom_boxplot() +
    labs(title = df_title, x = "ttt", y = "Change in mass (g)")

  p2 <- ggplot(df, aes(x = sex, y = mass_diff)) +
    geom_boxplot() +
    labs(title = df_title, x = "sex", y = "Change in mass (g)")

  p3 <- ggplot(df, aes(x = ttt, y = mass_percent)) +
    geom_boxplot() +
    labs(title = df_title, x = "ttt", y = "Percent change in mass")

  p4 <- ggplot(df, aes(x = sex, y = mass_percent)) +
    geom_boxplot() +
    labs(title = df_title, x = "sex", y = "Percent change in mass")

  (p1 | p2) / (p3 | p4)
}

# Carapace width plots
plot_cw(dat_expt1, "Experiment 1: food")
plot_cw(dat_expt2, "Experiment 2: photoperiod")
plot_cw(dat_expt3, "Experiment 3: space")

# Mass plots
plot_mass(dat_expt1, "Experiment 1: food")
plot_mass(dat_expt2, "Experiment 2: photoperiod")
plot_mass(dat_expt3, "Experiment 3: space")

# Save carapace width plots
ggsave("03_Figures/cw_diff_expt1.png", plot_cw(dat_expt1, "Experiment 1: food"), width = 10, height = 8, dpi = 300)
ggsave("03_Figures/cw_diff_expt2.png", plot_cw(dat_expt2, "Experiment 2: photoperiod"), width = 10, height = 8, dpi = 300)
ggsave("03_Figures/cw_diff_expt3.png", plot_cw(dat_expt3, "Experiment 3: space"), width = 10, height = 8, dpi = 300)

# Save mass plots
ggsave("03_Figures/mass_diff_expt1.png", plot_mass(dat_expt1, "Experiment 1: food"), width = 10, height = 8, dpi = 300)
ggsave("03_Figures/mass_diff_expt2.png", plot_mass(dat_expt2, "Experiment 2: photoperiod"), width = 10, height = 8, dpi = 300)
ggsave("03_Figures/mass_diff_expt3.png", plot_mass(dat_expt3, "Experiment 3: space"), width = 10, height = 8, dpi = 300)

```

## Proportion molt
```{r}
# Function to plot molt proportions by treatment
plot_molt_by_ttt <- function(df, df_title) {
  df <- df %>% drop_na(molt, ttt)

  ggplot(df, aes(x = ttt, y = molt)) +
    stat_summary(fun = mean, geom = "bar", fill = "darkgreen") +
    stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2) +
    labs(
      title = df_title,
      x = "Treatment",
      y = "Proportion molted"
    ) +
    ylim(0, 1)
}

# Generate and display plots for each dataset
plot_molt_by_ttt(dat_expt1, "Experiment 1: food")
plot_molt_by_ttt(dat_expt2, "Experiment 2: photoperiod")
plot_molt_by_ttt(dat_expt3, "Experiment 3: space")

# Save molt proportion plots
ggsave("03_Figures/molt_expt1.png", plot_molt_by_ttt(dat_expt1, "Experiment 1: food"), width = 8, height = 6, dpi = 300)
ggsave("03_Figures/molt_expt2.png", plot_molt_by_ttt(dat_expt2, "Experiment 2: photoperiod"), width = 8, height = 6, dpi = 300)
ggsave("03_Figures/molt_expt3.png", plot_molt_by_ttt(dat_expt3, "Experiment 3: space"), width = 8, height = 6, dpi = 300)

```

# Analyses

## Check distributions and assumptions of parametric t-tools
```{r}
# Function to check assumptions and save results
check_assumptions <- function(data, group_var, test_vars, dataset_name) {
  results <- list()
  
  for (var in test_vars) {
    var_results <- list()
    
    # Normality check using by()
    normality <- by(data[[var]], data[[group_var]], function(x) {
      x <- na.omit(x)
      group_name <- attr(x, "subset")
      if (length(x) >= 3) {
        shapiro <- shapiro.test(x)
        return(list(group = group_name, p_value = shapiro$p.value))
      } else {
        return(list(group = group_name, p_value = NA, note = "Insufficient data"))
      }
    })
    var_results$normality <- normality
    
    # Levene's Test
    formula <- as.formula(paste(var, "~", group_var))
    levene <- leveneTest(formula, data = data)
    var_results$levene <- capture.output(print(levene))
    
    results[[var]] <- var_results
  }
  
  # Prepare output text
  output <- c(paste0("=== Assumption Checks for ", dataset_name, " ===\n"))
  for (var in names(results)) {
    output <- c(output, paste0("\n--- ", var, " ---\n"))
    
    output <- c(output, "Shapiro-Wilk Normality Test:")
    for (res in results[[var]]$normality) {
      if (!is.null(res$note)) {
        output <- c(output, paste("Group:", res$group, "-", res$note))
      } else {
        output <- c(output, paste("Group:", res$group, "- p-value:", round(res$p_value, 5)))
      }
    }
    
    output <- c(output, "\nLevene's Test for Homogeneity of Variance:")
    output <- c(output, results[[var]]$levene)
  }
  
  return(output)
}

# Variables to test
test_vars <- c("cw_diff", "cw_percent", "mass_diff", "mass_percent")

# Run checks and collect results
results1 <- check_assumptions(dat_expt1, "ttt", test_vars, "dat_expt1")
results2 <- check_assumptions(dat_expt2, "ttt", test_vars, "dat_expt2")
results3 <- check_assumptions(dat_expt3, "ttt", test_vars, "dat_expt3")

# Combine all results
all_results <- c(results1, "\n\n", results2, "\n\n", results3)

# Create output directory if it doesn't exist
output_dir <- "02_Results"
if (!dir.exists(output_dir)) dir.create(output_dir)

# Write to file
writeLines(all_results, file.path(output_dir, "growth_diagnostics.txt"))

# Most of the tests showed at least one group violated the assumption
# of normality, so we will use non-parametric tests for all analyses

```

## Change in size
```{r}
# Function to run non-parametric tests and collect full results
run_nonparametric_tests <- function(data, group_var, test_vars, dataset_name) {
  results <- list()
  
  for (var in test_vars) {
    df <- data[, c(group_var, var)]
    df <- na.omit(df)
    n_levels <- length(unique(df[[group_var]]))
    
    if (n_levels == 2) {
      test <- wilcox.test(as.formula(paste(var, "~", group_var)), data = df)
    } else if (n_levels > 2) {
      test <- kruskal.test(as.formula(paste(var, "~", group_var)), data = df)
    } else {
      test <- NULL
    }
    
    if (!is.null(test)) {
      test_output <- capture.output(print(test))
    } else {
      test_output <- "Not enough groups to run test"
    }
    
    results[[var]] <- test_output
  }
  
  # Format results for output
  output <- c(paste0("=== Non-Parametric Test Results for ", dataset_name, " ===\n"))
  for (var in names(results)) {
    output <- c(output, paste0("\n--- ", var, " ---"), results[[var]])
  }
  return(output)
}

# Variables to test
test_vars <- c("cw_diff", "cw_percent", "mass_diff", "mass_percent")

# Run tests and collect results
results1 <- run_nonparametric_tests(dat_expt1, "ttt", test_vars, "dat_expt1")
results2 <- run_nonparametric_tests(dat_expt2, "ttt", test_vars, "dat_expt2")
results3 <- run_nonparametric_tests(dat_expt3, "ttt", test_vars, "dat_expt3")

# Combine all results
all_results <- c(results1, "\n\n", results2, "\n\n", results3)

# Create output directory if it doesn't exist
output_dir <- "02_Results"
if (!dir.exists(output_dir)) dir.create(output_dir)

# Write to file
writeLines(all_results, file.path(output_dir, "growth_results.txt"))

```

## Proportion molt
```{r}
# Function to run logistic regression and collect results
run_logistic_models <- function(data, dataset_name) {
  output <- c(paste0("=== Logistic Regression Results for ", dataset_name, " ===\n"))
  
  # Remove missing data
  df <- data %>% select(molt, ttt) %>% na.omit()
  
  # Fit logistic regression model
  model <- glm(molt ~ ttt, data = df, family = binomial)
  
  # Model summary
  output <- c(output, "\n--- Model Summary ---")
  output <- c(output, capture.output(summary(model)))
  
  # Odds ratios
  output <- c(output, "\n--- Odds Ratios ---")
  odds_ratios <- exp(coef(model))
  output <- c(output, capture.output(odds_ratios))
  
  # ANOVA (likelihood ratio test)
  output <- c(output, "\n--- Likelihood Ratio Test (ANOVA) ---")
  output <- c(output, capture.output(anova(model, test = "Chisq")))
  
  return(output)
}

# Run models and collect results
results1 <- run_logistic_models(dat_expt1, "dat_expt1")
results2 <- run_logistic_models(dat_expt2, "dat_expt2")
results3 <- run_logistic_models(dat_expt3, "dat_expt3")

# Combine all results
all_results <- c(results1, "\n\n", results2, "\n\n", results3)

# Create output directory if it doesn't exist
output_dir <- "02_Results"
if (!dir.exists(output_dir)) dir.create(output_dir)

# Write to file
writeLines(all_results, file.path(output_dir, "molt_results.txt"))

```

## Logistic regression model diagnostics
```{r}
# Function to run diagnostics for logistic regression
logistic_diagnostics <- function(data, dataset_name) {
  output <- c(paste0("=== Logistic Regression Diagnostics for ", dataset_name, " ===\n"))
  
  df <- data %>% select(molt, ttt) %>% na.omit()
  model <- glm(molt ~ ttt, data = df, family = binomial)
  
  # Hosmer-Lemeshow test
  hl <- tryCatch({
    hoslem.test(df$molt, fitted(model), g = 10)
  }, error = function(e) {
    return("Hosmer-Lemeshow test failed (possibly due to small sample size or perfect separation).")
  })
  
  output <- c(output, "\n--- Hosmer-Lemeshow Test ---")
  output <- c(output, capture.output(hl))
  
  # Pseudo R²
  output <- c(output, "\n--- Pseudo R² (McFadden) ---")
  output <- c(output, capture.output(pR2(model)))
  
  # ROC and AUC
  roc_obj <- roc(df$molt, fitted(model))
  auc_val <- auc(roc_obj)
  output <- c(output, "\n--- ROC Curve and AUC ---")
  output <- c(output, paste("AUC:", round(auc_val, 4)))
  
  # Save ROC plot
  plot_path <- file.path("02_Results", paste0("molt_roc_", dataset_name, ".png"))
  png(plot_path)
  plot(roc_obj, main = paste("ROC Curve -", dataset_name))
  dev.off()
  
  return(output)
}

# Run diagnostics
diag1 <- logistic_diagnostics(dat_expt1, "dat_expt1")
diag2 <- logistic_diagnostics(dat_expt2, "dat_expt2")
diag3 <- logistic_diagnostics(dat_expt3, "dat_expt3")

# Combine all results
all_diagnostics <- c(diag1, "\n\n", diag2, "\n\n", diag3)

# Create output directory if it doesn't exist
output_dir <- "02_Results"
if (!dir.exists(output_dir)) dir.create(output_dir)

# Write diagnostics to file
writeLines(all_diagnostics, file.path(output_dir, "molt_diagnostics.txt"))
```
